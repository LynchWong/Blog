---
title: "Go面向对象"
date: 2015-06-30 10:34:28
categories: 
- Go
tags: 
- Go语言编程

---

# 面向对象

函数和方法在大多数语言中的语法声明和定义是完全一样的，只是概念上的不同而已。在大多数语言中￼方法是与某些特定类型相关联的函数。而函数更像是独立存在的，C语言是面向过程的语言，很多时候我们都会说调用什么什么函数完成什么任务。而在面向对象的编程语言中，我们说的更多可能就是调用相关对象的特定方法来完成一些任务。这里大家也许能感觉到面向对象编程的一些思想。
<!--more-->

在OBJC中，我们给对象发送的消息会被编译器转换成C函数，而该函数的一个参数就是方法的接收者。前面我们讲解了Go的函数，其实Go的函数还有另外一种形态，带有接收者的函数，我们称为方法。发现了没有，这里和OBJC的消息看起来就很像(如果你了解OBJC的运行时系统就深有体会)，只不过OBJC是靠运行时系统来实现面向对象的。

下面我们就通过实际的代码示例来讲解一下。

## 方法

前面一张我们讲解了struct类型，我们定义一个struct来表示长方形，你现在想要计算他的面积，按照面向过程的编程方式实现思路如下：

	package main
	import "fmt"

	type Rectangle struct {
		width, height float64
	}

	func area(r Rectangle) float64 {
		return r.width * r.height
	}

	func main() {
		r1 := Rectangle{8, 8}
		r2 := Rectangle{88, 88}
		fmt.Println("Area of r1 is: ", area(r1))
		fmt.Println("Area of r2 is: ", area(r2))
	}

如上所示，上面的area()就是函数，而不是作为Rectangle的方法实现的。我们可以把Rectangle当做一个对象，面积完全可以当做该对象的一个属性，计算的任务应当由对象来提供。按照上面的实现思路，当我们增加了圆形以及其他多边形时，要想计算面积就需要再增加方法了。显然，这样的设计并不优雅。

如果使用其他的面向对象的语言来实现这个需求，相信大家都能写出优雅完美的代码。但是Go如何来实现呢？

前面说了Go的函数还有另外一种形态，带有接收者的函数，我们称为方法。他的语法和函数声明语法几乎是一样的，只是在`func`后面增加了一个receiver(额就是方法所依从的主体)。

所以`area()`方法应该是依赖于某个形状的，比如上面，`area()`应该是属于Rectangle的方法，而不是一个外围函数。更具体地说，Rectangle存在字段width, height，同时存在`area()`方法，这些方法和属性都属于Rectangle。

用Rob Pike的话来说就是：

>"A method is a function with an implicit first argument, called a receiver."

看到这里就想起了OBJC的方法有两个隐藏参数，是在编译时插入到方法实现中的，这两个参数就是接收者和方法选择器。

方法的语法如下：

	func (r ReceiverType) funcName(parameters) (results)
	
让我们改写最开始的例子：

	package main
	import (
		"fmt"
		"math"
	)

	type Rectangle struct {
		width, height float64
	}

	type Circle struct {
		radius float64
	}

	func (r Rectangle) area() float64 {
		return r.width * r.height
	}

	func (c Circle) area() float64 {
		return c.radius * c.radius * math.Pi
	}


	func main() {
		r1 := Rectangle{8, 8}
		r2 := Rectangle{88, 88}
		c1 := Circle{8}
		c2 := Circle{88}

		fmt.Println("Area of r1 is: ", r1.area())
		fmt.Println("Area of r2 is: ", r2.area())
		fmt.Println("Area of c1 is: ", c1.area())
		fmt.Println("Area of c2 is: ", c2.area())
	}
	
在使用method的时候重要注意几点

* 虽然method的名字一模一样，但是如果接收者不一样，那么method就不一样
* method里面可以访问接收者的字段
* 调用method通过`.`访问，就像struct里面访问字段一样

方法除了可以作用在struct上，你还可以定义在任何你自定义的类型、内置类型、struct等各种类型上面。你可以通过如下形式声明自定义类型：

	type typeName typeLiteral
	
代码示例：

	type ages int

	type money float32

	type months map[string]int

	m := months {
		"January":31,
		"February":28,
		...
		"December":31,
	}	
	
实际上只是一个定义了一个别名，有点类似于c中的typedef，例如上面ages替代了int。

方法的复杂示例：

	package main
	import "fmt"
	
	const(
		WHITE = iota
		BLACK
		BLUE
		RED
		YELLOW
	)
	
	type Color byte
	
	type Box struct {
		width, height, depth float64
		color Color
	}
	
	type BoxList []Box
	
	func (b Box) Volume() float64 {
		return b.width * b.height * b.depth
	}
	
	func (b *Box) SetColor(c Color) {
		b.color = c
	}
	
	func (bl BoxList) BiggestColor() Color {
		v := 0.00
		k := Color(WHITE)
		for _, b := range bl {
			if bv := b.Volume(); bv > v {
				v = bv
				k = b.color
			}
		}
		return k
	}
	
	func (bl BoxList) PaintItBlack() {
		for i, _ := range bl {
			bl[i].SetColor(BLACK)
		}
	}
	
	func (c Color) String() string {
		strings := []string {"WHITE", "BLACK", "BLUE", "RED", "YELLOW"}
		return strings[c]
	}
	
	func main() {
		boxes := BoxList {
			Box{4, 4, 4, RED},
			Box{10, 10, 1, YELLOW},
			Box{1, 1, 20, BLACK},
			Box{10, 10, 1, BLUE},
			Box{10, 30, 1, WHITE},
			Box{20, 20, 20, YELLOW},
		}
	
		fmt.Printf("We have %d boxes in our set\n", len(boxes))
		fmt.Println("The volume of the first one is", boxes[0].Volume(), "cm³")
		fmt.Println("The color of the last one is",boxes[len(boxes)-1].color.String())
		fmt.Println("The biggest one is", boxes.BiggestColor().String())
	
		fmt.Println("Let's paint them all black")
		boxes.PaintItBlack()
		fmt.Println("The color of the second one is", boxes[1].color.String())
	
		fmt.Println("Obviously, now, the biggest one is", boxes.BiggestColor().String())
	}

上面的代码通过const定义了一些常量，然后定义了一些自定义类型

- Color作为byte的别名
- 定义了一个struct:Box，含有三个长宽高字段和一个颜色属性
- 定义了一个slice:BoxList，含有Box

然后以上面的自定义类型为接收者定义了一些method

- Volume()定义了接收者为Box，返回Box的容量
- SetColor(c Color)，把Box的颜色改为c
- BiggestColor()定在在BoxList上面，返回list里面容量最大的颜色
- PaintItBlack()把BoxList里面所有Box的颜色全部变成黑色
- String()定义在Color上面，返回Color的具体颜色(字符串格式)

上面的代码通过文字描述出来之后是不是很简单？我们一般解决问题都是通过问题的描述，去写相应的代码实现。

### 指针作为receiver

现在让我们回过头来看看SetColor这个method，它的receiver是一个指向Box的指针，是的，你可以使用*Box。想想为啥要使用指针而不是Box本身呢？

我们定义SetColor的真正目的是想改变这个Box的颜色，如果不传Box的指针，那么SetColor接受的其实是Box的一个copy，也就是说method内对于颜色值的修改，其实只作用于Box的copy，而不是真正的Box。所以我们需要传入指针。

这里可以把receiver当作method的第一个参数来看，然后结合前面函数讲解的传值和传引用就不难理解

这里你也许会问了那SetColor函数里面应该这样定义`*b.Color=c`,而不是`b.Color=c`,因为我们需要读取到指针相应的值。

你是对的，其实Go里面这两种方式都是正确的，当你用指针去访问相应的字段时(虽然指针没有任何的字段)，Go知道你要通过指针去获取这个值，看到了吧，Go的设计是不是越来越吸引你了。

也许细心的读者会问这样的问题，PaintItBlack里面调用SetColor的时候是不是应该写成`(&bl[i]).SetColor(BLACK)`，因为SetColor的receiver是*Box，而不是Box。

你又说对的，这两种方式都可以，因为Go知道receiver是指针，他自动帮你转了。

也就是说：
>如果一个method的receiver是*T,你可以在一个T类型的实例变量V上面调用这个method，而不需要&V去调用这个method

类似的
>如果一个method的receiver是T，你可以在一个*T类型的变量P上面调用这个method，而不需要 *P去调用这个method

所以，你不用担心你是调用的指针的method还是不是指针的method，Go知道你要做的一切，这对于有多年C/C++编程经验的同学来说，真是解决了一个很大的痛苦。

### 方法的继承

前面一章我们学习了字段的继承，那么你也会发现Go的一个神奇之处，method也是可以继承的。如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该method。让我们来看下面这个例子：

	package main
	import "fmt"

	type Human struct {
		name string
		age int
		phone string
	}

	type Student struct {
		Human //匿名字段
		school string
	}

	type Employee struct {
		Human //匿名字段
		company string
	}

	//在human上面定义了一个method
	func (h *Human) SayHi() {
		fmt.Printf("Hi, I am %s you can call me on %s\n", h.name, h.phone)
	}

	func main() {
		mark := Student{Human{"Mark", 25, "222-222-YYYY"}, "MIT"}
		sam := Employee{Human{"Sam", 45, "111-888-XXXX"}, "Golang Inc"}

		mark.SayHi()
		sam.SayHi()
	}
	
### 方法的重写

上面的例子中，如果Employee想要实现自己的SayHi,怎么办？简单，和匿名字段冲突一样的道理，我们可以在Employee上面定义一个method，重写了匿名字段的方法。请看下面的例子：

	package main
	import "fmt"

	type Human struct {
		name string
		age int
		phone string
	}

	type Student struct {
		Human //匿名字段
		school string
	}

	type Employee struct {
		Human //匿名字段
		company string
	}

	//Human定义method
	func (h *Human) SayHi() {
		fmt.Printf("Hi, I am %s you can call me on %s\n", h.name, h.phone)
	}

	//Employee的method重写Human的method
	func (e *Employee) SayHi() {
		fmt.Printf("Hi, I am %s, I work at %s. Call me on %s\n", e.name,
			e.company, e.phone) //Yes you can split into 2 lines here.
	}

	func main() {
		mark := Student{Human{"Mark", 25, "222-222-YYYY"}, "MIT"}
		sam := Employee{Human{"Sam", 45, "111-888-XXXX"}, "Golang Inc"}

		mark.SayHi()
		sam.SayHi()
	}
	
上面的代码设计的是如此的美妙，让人不自觉的为Go的设计惊叹！

通过这些内容，我们可以设计出基本的面向对象的程序了，但是Go里面的面向对象是如此的简单，没有任何的私有、公有关键字，通过大小写来实现(大写开头的为公有，小写开头的为私有)，方法也同样适用这个原则。
