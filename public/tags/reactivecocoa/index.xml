<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactivecocoa on Nobodyknows&#43; 2.5</title>
    <link>http://lynchwong.com/tags/reactivecocoa/index.xml</link>
    <description>Recent content in Reactivecocoa on Nobodyknows&#43; 2.5</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://lynchwong.com/tags/reactivecocoa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ReactiveCocoa</title>
      <link>http://lynchwong.com/2015/10/reactivecocoa/</link>
      <pubDate>Thu, 29 Oct 2015 11:27:32 +0000</pubDate>
      
      <guid>http://lynchwong.com/2015/10/reactivecocoa/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa&#34;&gt; ReactiveCocoa &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;说明：现在RAC的版本已经是4.0了，使用Swift2.0开发的。从3.0开始就已经全面转向Swift，并且跟之前OC版本的相比已经有很大不同了。2.5及以前的OC版本能找到很多的学习资料，包括国内以及国外的，就不多说了。我们这里主要面向4.0的版本，以及Swift2.0。&lt;/p&gt;

&lt;p&gt;本篇是翻译RAC4.0的README.md，原文地址在开头已经给出了。你也可以在框架的Tag里面找到其他版本的README.md以及其他的文档，可以看看2.5OC版本和现在的版本有什么不一样。&lt;/p&gt;

&lt;h1 id=&#34;reactivecocoa&#34;&gt;ReactiveCocoa&lt;/h1&gt;

&lt;p&gt;ReactiveCocoa(RAC) 是受&lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt; Functional Reactive Programming &lt;/a&gt;启发而开发的一个Cocoa框架。它为我们提供了组合和转换流的值的API。&lt;/p&gt;

&lt;p&gt;如果你已经熟悉了函数响应式编程或者了解ReactiveCocoa是什么了，你可以查看这些&lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/tree/master/Documentation&#34;&gt; 文档 &lt;/a&gt;来了解关于ReactiveCocoa是如何工作的更深入的信息。然后直接进入&lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/tree/master/ReactiveCocoa&#34;&gt; 文档注释 &lt;/a&gt;学习更多关于OC和Swift的API。&lt;/p&gt;

&lt;p&gt;兼容性：本篇文档是关于RAC 4的，Swift2.x。Swift1.2请参考&lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/tree/v3.0.0&#34;&gt; RAC3 &lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;

&lt;p&gt;ReactiveCocoa 受&lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt; Functional Reactive Programming &lt;/a&gt;启发。比起使用可变变量来替换或者修改值，RAC提供了“事件流”，用&lt;strong&gt;Signal&lt;/strong&gt;和&lt;strong&gt;SignalProducer&lt;/strong&gt;类型来表示，随着时间的推移会一直传输值。&lt;/p&gt;

&lt;p&gt;事件流统一了Cocoa里面为异步操作以及事件处理的常见的编程模式，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代理方法&lt;/li&gt;
&lt;li&gt;回调Block&lt;/li&gt;
&lt;li&gt;通知&lt;/li&gt;
&lt;li&gt;控制事件&lt;/li&gt;
&lt;li&gt;Futures and promises&lt;/li&gt;
&lt;li&gt;KVO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为这些所有不同的机制可以用同一种方式来表示，能够很容易的通过声明的方式链接组合在一起，能给我们的App带来更少的意大利面似得代码，以及更少的状态。&lt;/p&gt;

&lt;p&gt;关于ReactiveCocoa更多的概念，参见&lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md&#34;&gt; Framework Overview &lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;举例-联网搜索&#34;&gt;举例：联网搜索&lt;/h2&gt;

&lt;p&gt;假设你有一个输入框，不管用户输入什么，你都想执行一个网络请求来搜索输入的内容。&lt;/p&gt;

&lt;h3 id=&#34;observing-text-edits-观察用户的输入&#34;&gt;Observing text edits(观察用户的输入)&lt;/h3&gt;

&lt;p&gt;第一步就是观察用户的输入，我们使用RAC里面&lt;strong&gt;UITextField&lt;/strong&gt;的一个拓展来完成这项工作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let searchStrings = textField.rac_textSignal()
    .toSignalProducer()
    .map { text in text as! String }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们得到了一个发送&lt;strong&gt;String&lt;/strong&gt;类型值的一个&lt;strong&gt;SignalProducer&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&#34;making-network-requests-进行网络请求&#34;&gt;Making network requests(进行网络请求)&lt;/h3&gt;

&lt;p&gt;对于每一次输入的字符串，我们都想执行网络请求。幸运的是，RAC提供的&lt;strong&gt;NSURLSession&lt;/strong&gt;的一个拓展能够完成这项工作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let searchResults = searchStrings
    .flatMap(.Latest) { (query: String) -&amp;gt; SignalProducer&amp;lt;(NSData, NSURLResponse), NSError&amp;gt; in
        let URLRequest = self.searchRequestWithEscapedQuery(query)
        return NSURLSession.sharedSession().rac_dataWithRequest(URLRequest)
    }
    .map { (data, URLResponse) -&amp;gt; String in
        let string = String(data: data, encoding: NSUTF8StringEncoding)!
        return self.parseJSONResultsFromString(string)
    }
    .observeOn(UIScheduler())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先降我们发送&lt;strong&gt;String&lt;/strong&gt;类型值的&lt;strong&gt;SignalProducer&lt;/strong&gt;转换为了一个发送包含搜索结果数组的&lt;strong&gt;SignalProducer&lt;/strong&gt;，都会在主线程上发送。&lt;/p&gt;

&lt;p&gt;除此之外，.flatMap(.Latest)会保证只有一次搜索－最新的－会被允许执行。如果正在网络请求的时候用户又进行了输入，在开始新的请求前这个网络请求会被取消。想想你自己实现这些功能需要手敲多少代码。&lt;/p&gt;

&lt;h3 id=&#34;receiving-the-results-接收结果&#34;&gt;Receiving the results(接收结果)&lt;/h3&gt;

&lt;p&gt;其实这些代码并不会执行，因为&lt;strong&gt;SignalProducer&lt;/strong&gt;必须*started*才能接收到结果(防止做了工作而并没有使用结果)。很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;searchResults.startWithNext { results in
    print(&amp;quot;Search results: \(results)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们监控了&lt;strong&gt;Next&lt;/strong&gt;事件，包含了我们的请求结果，然后打印到控制台。或者你可以在这里做一些其它的事情，比如更新列表视图或者界面上的标签。&lt;/p&gt;

&lt;h3 id=&#34;handling-failures-处理失败&#34;&gt;Handling failures(处理失败)&lt;/h3&gt;

&lt;p&gt;在这个例子中，到目前为止，任何网络请求错误都将会生成&lt;strong&gt;Failed&lt;/strong&gt;事件，将会结束这个事件流。不幸的是，这意味着之后的查询甚至都不会被尝试执行。&lt;/p&gt;

&lt;p&gt;为了解决这种情况，我们需要决定当失败发生时要做些什么。最快速的解决方案就是打印到日志，然后忽视它们：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.flatMap(.Latest) { (query: String) -&amp;gt; SignalProducer&amp;lt;(NSData, NSURLResponse), NSError&amp;gt; in
    let URLRequest = self.searchRequestWithEscapedQuery(query)

    return NSURLSession.sharedSession()
        .rac_dataWithRequest(URLRequest)
        .flatMapError { error in
            print(&amp;quot;Network error occurred: \(error)&amp;quot;)
            return SignalProducer.empty
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过使用&lt;strong&gt;empty&lt;/strong&gt;事件流来替换失败，就能够忽视它们。&lt;/p&gt;

&lt;p&gt;然后，在放弃之前至少尝试几次可能更合理。方便的是，正好有&lt;strong&gt;retry&lt;/strong&gt;操作符。&lt;/p&gt;

&lt;p&gt;改进后的&lt;strong&gt;searchResults&lt;/strong&gt;如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let searchResults = searchStrings
    .flatMap(.Latest) { (query: String) -&amp;gt; SignalProducer&amp;lt;(NSData, NSURLResponse), NSError&amp;gt; in
        let URLRequest = self.searchRequestWithEscapedQuery(query)

        return NSURLSession.sharedSession()
            .rac_dataWithRequest(URLRequest)
            .retry(2)
            .flatMapError { error in
                print(&amp;quot;Network error occurred: \(error)&amp;quot;)
                return SignalProducer.empty
        }
    }
    .map { (data, URLResponse) -&amp;gt; String in
        let string = String(data: data, encoding: NSUTF8StringEncoding)!
        return self.parseJSONResultsFromString(string)
    }
    .observeOn(UIScheduler())
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;throttling-requests-请求节流&#34;&gt;Throttling requests(请求节流)&lt;/h3&gt;

&lt;p&gt;现在，你只想在用户停止输入的时候才执行搜索，来减少请求拥堵。&lt;/p&gt;

&lt;p&gt;ReactiveCocoa 定义了&lt;strong&gt;throttle&lt;/strong&gt;操作符来实现上面的需求：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let searchStrings = textField.rac_textSignal()
    .toSignalProducer()
    .map { text in text as! String }
    .throttle(0.5, onScheduler: QueueScheduler.mainQueueScheduler)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当用户停止编辑0.5秒后我们才会使用输入的字符串进行搜索。&lt;/p&gt;

&lt;p&gt;如果我们手动的来实现这个需求，需要明显的状态变量，然后代码很难读。使用ReactiveCocoa，我们只需要一个操作符就能把将时间加入到事件流中。&lt;/p&gt;

&lt;h2 id=&#34;objective-c-and-swift&#34;&gt;Objective-C and Swift&lt;/h2&gt;

&lt;p&gt;尽管ReactiveCocoa是以Objective-C框架开始的，3.0版本，所有主要的功能开发都集中到了Swift API上。&lt;/p&gt;

&lt;p&gt;RAC的Objective-C API和Swift API是完全分开的，但是有桥接文件是它们可以互相转换。这样能够兼容老的ReactiveCocoa项目，同时也能使用还没添加到Swift API的Cocoa extensions。&lt;/p&gt;

&lt;p&gt;Objective-C API将会继续存在一段时间，但是不再接收很多改进了。更多关于使用Objective-C API 的信息，参阅 &lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa/tree/master/Documentation/Legacy&#34;&gt; legacy documentation &lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;强烈推荐所有的新项目使用Swift API。&lt;/p&gt;

&lt;p&gt;剩下的内容就不翻译了，不是很重要。最后要说的一点就是3.0版本和之前版本最大的区别就是冷信号和热信号了。之前都是由&lt;strong&gt;RACSignal&lt;/strong&gt;表示的，3.0之后就分开了，由&lt;strong&gt;Signal&lt;/strong&gt;表示热信号，&lt;strong&gt;SignalProducer&lt;/strong&gt;表示冷信号。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Input and Output</title>
      <link>http://lynchwong.com/2015/10/input-and-output/</link>
      <pubDate>Wed, 28 Oct 2015 08:49:25 +0000</pubDate>
      
      <guid>http://lynchwong.com/2015/10/input-and-output/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;说明&#34;&gt;说明&lt;/h1&gt;

&lt;p&gt;ReactiveCocoa是iOS里面一个函数响应式编程的框架，在自己的项目里经常使用，对这个框架特别感兴趣，也一直想做些记录，所以现在就开始了。现在这个框架已经是4.0版本了，完全支持Swift，源码看起来很漂亮，但是跟之前的版本有了很大的变化。&lt;/p&gt;

&lt;p&gt;接下来的一些博文就是讲解一些基础的概念或者文档，本篇是讲解FRP的一篇译文。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.maybeapps.com/post/42894317939/input-and-output&#34;&gt; 原文地址：Input and Output &lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&#34;正文&#34;&gt;正文&lt;/h1&gt;

&lt;h2 id=&#34;input-and-output&#34;&gt;Input and Output&lt;/h2&gt;

&lt;p&gt;应用程序接受输入然后产生输出。这里的输出就是使用输入进行一些加工后的结果。输入，转换，输出，完成。&lt;/p&gt;

&lt;p&gt;当应用程序是&lt;strong&gt;UNIX&lt;/strong&gt;工具的时候这种模式就很明显。接收一个字符串，统计单词，输出结果。但是当我们在开发一个有界面UI、大量不同功能、不定时的任务的iOS应用程序时就很难看出这种模式。&lt;/p&gt;

&lt;p&gt;在iOS应用程序中什么是输入，什么是输出？&lt;/p&gt;

&lt;p&gt;输入就是对应用程序的所有的动作。触摸、键盘事件。定时器触发，GPS定位事件，网络请求响应。这些事情都是输入。这些事情都出现在应用程序中，然后应用程序结合这些所有的输入以某种方式得到一个结果：输出。&lt;/p&gt;

&lt;p&gt;在应用程序中输出通常是界面UI的改变。一个开关的拨动或者一个列表获得了新的行。或者更多，比如文件写入磁盘，或者API请求。这些事情都是应用程序的输出。&lt;/p&gt;

&lt;p&gt;但是不同于经典的输入／输出模式，这些输入和输出不止发生一次。不是单一的输入-&amp;gt;处理-&amp;gt;输出，只要应用程序在运行就会继续循环这个过程。实际上应用程序一直都在消费这些输入，然后基于这些输入产出输出。&lt;/p&gt;

&lt;p&gt;换句话说，输出就是在那个时间点结合所有输入产生的结果。输出就是在那个时间点所有输入的一个函数。&lt;/p&gt;

&lt;p&gt;那么我们为什么要关心这些？因为新的视角具有价值，也是必要的。在当前这种情形中，给了我们一个新的极好的工具。&lt;/p&gt;

&lt;h3 id=&#34;state&#34;&gt;STATE&lt;/h3&gt;

&lt;p&gt;从现在这个视角来看，没有任何关于状态的想法在里面。仅仅是输入的改变导向一个新的输出。状态也许是应用程序处理输入的一个实现细节，但是不是必须的。这并不是我们思想的本质。&lt;/p&gt;

&lt;p&gt;大多数问题最佳的解决方案都有一些内在的状态。状态可以是本质上的。但是我们并不一定要处理状态。我们做任何事情都是处理状态。因为我们对待我们应用程序的所有输入都是不同的事情－触摸事件，网络响应－我们不能用某种有意义的方式让他们结合起来。不能用统一的方法来转换它们。所以我们处理这些所有不同东西的唯一工具就是状态。当我们的唯一工具就是状态的时候，每一个问题看起来好像都是有状态的。&lt;/p&gt;

&lt;p&gt;状态并不好。状态将复杂性引入了进来。更糟的是，复杂性的增长远比我们应用程序的代码量增长。我们习惯于不断的向我们的应用程序引入更多的状态。新功能？新状态。新的复杂性。新的Bugs。&lt;/p&gt;

&lt;p&gt;但是普天同庆的是基于我们应用程序的输出是持续时间中所有输入的一个函数的新视角给了我们一个新的工具：函数式响应编程（Functional Reactive Programming）。函数式响应编程（FRP）是基于时变函数产生时变值这种思想而建立的编程范式。&lt;/p&gt;

&lt;h3 id=&#34;time&#34;&gt;TIME&lt;/h3&gt;

&lt;p&gt;时变值也许听起来很空洞。难道不是状态的另一种说话吗？他们都捕捉到了相同的思想－只要程序在运行就会有东西在改变。但是通过形式化和具体化的时间变化，我们可以确定改变的理由是很安全的。&lt;/p&gt;

&lt;p&gt;时变值可以来自于其他的时变值，这些时变值来自于应用程序的输入。所以当传统的状态卸下保证我们应用程序是在我们熟知状态的重担时，FRP让我们依据时变值来定义我们的应用程序并且保证改变是必需的。&lt;/p&gt;

&lt;p&gt;以前，状态是离散的，都是独立的。但是时变值就像是适合一个档位的所有的齿轮。当一个齿轮运转时，就带动了所有与它链接的齿轮，然后一起运转，最后整个机制就靠它们自己运行了起来。&lt;/p&gt;

&lt;p&gt;FRP太美了。&lt;/p&gt;

&lt;p&gt;有很多事情的行为就像是时变值。异步任务就是时变值，只有完成工作才会有值。或者UI元素的值也可以看做是时变值，当用户交互时才会改变。如果我的应用程序运行在手机设备上，设备的GPS定位系统也是时变值，&lt;/p&gt;

&lt;p&gt;所有的事情都是时变值，所有的方式。状态，输入和输出。&lt;/p&gt;

&lt;h3 id=&#34;functional-reactive-programming&#34;&gt;FUNCTIONAL REACTIVE PROGRAMMING&lt;/h3&gt;

&lt;p&gt;函数式响应编程来自于函数式编程语言。&lt;/p&gt;

&lt;p&gt;Haskell有&lt;a href=&#34;https://wiki.haskell.org/Functional_Reactive_Programming&#34;&gt; number of implementations &lt;/a&gt;，具有不同程度的完整性和可用性。&lt;/p&gt;

&lt;p&gt;Racket，一门Lisp-y语言，有&lt;a href=&#34;http://docs.racket-lang.org/frtime/&#34;&gt; FrTime &lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;对于命令式语言也有大量的实现。来自于微软的900磅大猩猩&lt;a href=&#34;https://msdn.microsoft.com/en-us/data/gg577609.aspx&#34;&gt; Reactive Extensions(Rx) &lt;/a&gt;。是第一个令人信服的将FRP原则带入到命令式语言的例子。&lt;/p&gt;

&lt;p&gt;在JVM上Netflix的&lt;a href=&#34;http://techblog.netflix.com/2013/02/rxjava-netflix-api.html&#34;&gt; re-implemented Rx &lt;/a&gt;。Clojure, Scala, Groovy, and JRuby有&lt;a href=&#34;https://github.com/ReactiveX/RxJava/tree/master/language-adaptors&#34;&gt; adapters &lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Javascript还有一些不同的FRP库。微软的&lt;a href=&#34;https://github.com/Reactive-Extensions/RxJS&#34;&gt; RxJS &lt;/a&gt;，其他的如&lt;a href=&#34;http://www.flapjax-lang.org&#34;&gt; Flapjax &lt;/a&gt;，&lt;a href=&#34;https://github.com/baconjs/bacon.js&#34;&gt; BacomJS &lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://elm-lang.org&#34;&gt; Elm &lt;/a&gt;是一门类Haskell语言，可以编译为JavaScript。它是我见过的最漂亮，最实用的FRP实现。&lt;/p&gt;

&lt;p&gt;最后但并非最不重要，我们将Rx带入了Objective-C：&lt;a href=&#34;https://github.com/ReactiveCocoa/ReactiveCocoa&#34;&gt; ReactiveCocoa &lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;EXAMPLE&lt;/h3&gt;

&lt;p&gt;让我们看看FRP在实际中是如何实现的。FRP在函数式语言中很美丽，但是悲哀的是我们并不是时时刻刻都在使用函数式的语言。&lt;/p&gt;

&lt;p&gt;假设我们在开发一个iOS的应用。我们使用ReactiveCocoa来实现我们创建账户的视图。用户将会输入姓名，邮箱（输入两次），还有一个创建的按钮给它们点击。&lt;/p&gt;

&lt;p&gt;我们依据输入和输出来思考。对于这些视图来说什么是输入？显而易见的是用户会输入他们的信息。然后会点击创建按钮。就是这些了。对于我们的视图来说这些就是所有的输入了。我们的输出会根据这些输入来定义。&lt;/p&gt;

&lt;p&gt;将会有大量的用户界面改变的输出。这个创建按钮只有用户在输入了通过验证（两次邮箱相同，用户名合法）的用户名，邮箱之后才可用。&lt;/p&gt;

&lt;p&gt;如果我们按照传统的编程来实现，我们需要检测我们的输入，然后根据输入手动改变创建按钮是否可用：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/joshaber/35c68f23e935bff4afd5&#34;&gt;https://gist.github.com/joshaber/35c68f23e935bff4afd5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是，其实我们真正想做的就是声明表单验证和创建按钮是否可用之间的关系（在视图整个生命周期中）。&lt;/p&gt;

&lt;p&gt;我们想用输入来驱动输出，ReactiveCocoa可以让我们这样做；&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/joshaber/11f13b2d3b58141d085e&#34;&gt;https://gist.github.com/joshaber/11f13b2d3b58141d085e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;现在不管用户名，邮箱改变，我们都会将这些改变的值减少成为一个布尔值来指示这些表单是否通过了验证然后来指示点击按钮是否可用。&lt;/p&gt;

&lt;p&gt;注意例子中的最后一行。不同于一次赋值，实际上建立的是一种关系。不只赋值一次，随着时间的变化我们在一直赋值。这个按钮是否可用来自于表单是否通过验证。输出就是输入的函数。&lt;/p&gt;

&lt;p&gt;当创建执行时，我们想要禁用掉输入框然后将颜色变为灰色：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/joshaber/f59759d1674f82837b8d&#34;&gt;https://gist.github.com/joshaber/f59759d1674f82837b8d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们可以将剩下的输出像这样类似的连接起来。输出就是我们输入的组合或者转换。&lt;/p&gt;

&lt;h3 id=&#34;fin&#34;&gt;FIN&lt;/h3&gt;

&lt;p&gt;这是一个在命令式语言中实现FRP原则的简短、实用的例子。完整例子代码：&lt;a href=&#34;https://github.com/joshaber/RACSignupDemo&#34;&gt; RACSignupDemo &lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;函数式响应编程提供了一种方式，这种方式让我们又一次将编程视为简单的输入和输出。我们最小化了状态并且统一了我们应用程序做的事情。所有的就是输入和输出。&lt;/p&gt;

&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;p&gt;翻译的不好，没有信雅达，见谅。
文中很多链接不可用，还是按照原文放在这里了。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>